/*
* javascript file to the Minate web application
*
* abandon all hope ye' who enter here! just 'cause you won't understand the brilliance of the code,
* you're about to read!
* go and grab one of those eclipse glasses. don't ever say I didn't warn you...
* 
* ready?! behold....
* 
*/

/*
* The Controller. His main, and only, function is to control! Yeah, he's like a control freak, he
* holds references to his Model and View, and then controls them. Like a motherfucker!
* 
* He reacts to events generated by the View. Well c'mon, he's just a guy, who came from work and just
* needs some quiet time, in the sofa, watching TV and has to listen to those goddamn events from his 
* View?! For christ sake, you would react too, wouldn't you?! He surely didn't marry her for this.
*
* And that's why he goes to his Model. He's sick and tired of listening to events from his View, since
* he got home. So this nice Model, gives him everything he needs to react to those events from the View.
* And guess what? When he gets his goodies from the Model, he's ready to respond to every event from his view.
*
* Now that's a man, hmm?!
*
*/
var MinateController = new (function() {

    var minateModel; // The Model, from where our Controller get's everything he wants.
    var minateView;  // The View, who just sits there and fires events at out Controller, and then gets what she asked for!

    /*
    * Our Controller is born! We now give him, everything he needs to do what he does best! Control! Control like
    * a goddamn motherfucker he is!
    *
    */
    this.Init = function(_maxX, _maxY, _bombs) {
        minateModel = MinateModel;
        minateView = MinateView;

        minateModel.Init(_maxX, _maxY, _bombs);
        minateView.Init(_maxX, _maxY, _bombs);

        minateModel.MakeBoard();
    }

    /*
    * Well the View has sent an event to our friend Controller and he needs to treat it.
    * He goes and gets everything from the Model, as I, the developer, had explained, and
    * then proceeds to tell the View to do what he wants to do. Open cells, that is...
    *
    */
    this.CellClick = function(x, y, e) {
        currPlayer = minateModel.GetCurrentPlayer();
        oldMines = currPlayer.mines;

        cellsToOpen = minateModel.GetCellsToOpen(x, y);

        if (cellsToOpen.length !== 0) {
            minateModel.OpenAllMarkedCells();

            minateView.OpenCells(cellsToOpen, currPlayer);

            if (currPlayer.mines > oldMines) {
                minateView.ChangePlayerMines(currPlayer);

                if (currPlayer.mines > (minateModel.GetTotalBombs() / 2)) {
                    minateModel.ClearBoardModel();
                    minateModel.PopulateWithBombs();

                    minateView.ClearBoardView();
                    minateView.ClearPlayerScores(minateModel.ResetPlayers());

                    minateView.ShowWinningDialog(currPlayer);

                }
            } else {
                minateView.ChangeActivePlayer(currPlayer, currPlayer.nextPlayer);
                minateModel.NextPlayerTurn();
            }
        }
    }
})();